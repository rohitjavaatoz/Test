@Override
	public ResponseEntity<EmailLocationDTO> getLocationIds(Integer emailExtractionId, UUID uuid) {
		try {
			LOGGER.info("TPMRequestApiRestController:: getLocationIds:: fetching locationIds for TPM request with ExtractionId:{},uuid:{}",emailExtractionId,uuid);
			EmailLocationDTO emailLocationDTO = tpmRequestService.fetchLocationIds(emailExtractionId,uuid);
			LOGGER.info("TPMRequestApiRestController:: getLocationIds:: fetched locationIds for TPM request with ExtractionId:{},uuid:{}",emailExtractionId,uuid);
			return new ResponseEntity<>(emailLocationDTO,HttpStatus.OK);
		} catch (Exception e) {
			LOGGER.error("TPMRequestApiRestController:: getLocationIds:: Exception occurred during fetching of locationIds {} {}, uuid={}", e.getStackTrace(), e.getMessage(),uuid);
			return null;
		}
	}
------
@Test
public void getLocationIds_Exception() {
    // Arrange
    int emailExtractionId = 1;
    UUID uuid = UUID.randomUUID();

    // Mocking an exception
    when(tpmRequestService.fetchLocationIds(emailExtractionId, uuid)).thenThrow(new RuntimeException("Simulated exception"));

    // Act
    ResponseEntity<EmailLocationDTO> responseEntity = controller.getLocationIds(emailExtractionId, uuid);

    // Assert
    assertNotNull(responseEntity);
    assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, responseEntity.getStatusCode());
    assertNull(responseEntity.getBody());

    // Verify method calls
    verify(tpmRequestService, times(1)).fetchLocationIds(emailExtractionId, uuid);
    // Additional verifications for logging if necessary
}
