
import java.sql.Timestamp;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import com.verizon.ucm.interactionmanagement.constants.Constants;
import com.verizon.ucm.interactionmanagement.dto.ParsingResponseDTO;
import com.verizon.ucm.interactionmanagement.dto.UserInfoDTO;
import com.verizon.ucm.interactionmanagement.services.external.ExternalParsingEngineImpl;
import com.verizon.ucm.interactionmanagement.util.DateTimeConversionUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.verizon.ucm.interactionmanagement.dto.EmailLabelsResponse;
import com.verizon.ucm.interactionmanagement.entity.EmailExtractionMappingEntity;
import com.verizon.ucm.interactionmanagement.entity.EmailMessagesEntity;
import com.verizon.ucm.interactionmanagement.entity.MessagesEntity;
import com.verizon.ucm.interactionmanagement.ifc.SubmitterInfoIfc;
import com.verizon.ucm.interactionmanagement.model.EmailAttachments;
import com.verizon.ucm.interactionmanagement.model.EmailLabelsEntity;
import com.verizon.ucm.interactionmanagement.model.EmailMessageExtraction;
import com.verizon.ucm.interactionmanagement.model.EmailMessageLabelsEntity;
import com.verizon.ucm.interactionmanagement.model.EmailMessageTPMRequest;
import com.verizon.ucm.interactionmanagement.model.Party;
import com.verizon.ucm.interactionmanagement.repository.EmailAttachmentsRepository;
import com.verizon.ucm.interactionmanagement.repository.EmailExtractionMappingRepository;
import com.verizon.ucm.interactionmanagement.repository.EmailMessageLabelsRepository;
import com.verizon.ucm.interactionmanagement.repository.EmailMessageTPMRequestRepository;
import com.verizon.ucm.interactionmanagement.repository.EmailMessagesRepository;
import com.verizon.ucm.interactionmanagement.response.EmailMessageSearchResponse;
import com.verizon.ucm.interactionmanagement.dto.UserLabelSearchResponse;

@Service
public class EmailMessageSearchService {

	private static final Logger LOGGER = LoggerFactory.getLogger(EmailMessageSearchService.class);

	@Autowired
	protected EmailMessageLabelsRepository emailMessageLabelsRepository;
	@Autowired
	ExternalParsingEngineImpl externalParsingEngine;
	@Autowired
	private EmailAttachmentsRepository emailAttachmentsRepository;
	
	@Autowired
	private EmailExtractionMappingRepository emailExtractionMappingRepository;
	
	@Autowired
	private EmailMessageTPMRequestRepository emailMessageTPMRequestRepository;
	
	@Autowired
	private EmailMessagesRepository emailMessagesRepository;

	
public void fetchEmailMessageLabels(List<EmailMessageLabelsEntity> emailMessageLabelsEntityList, List<EmailLabelsResponse> emailLabelsList, List<UserLabelSearchResponse> userLabels, UUID uuid) {
		if (emailMessageLabelsEntityList != null && !emailMessageLabelsEntityList.isEmpty()) {
			for (EmailMessageLabelsEntity emailMessageLabelsEntity : emailMessageLabelsEntityList) {
				if (emailMessageLabelsEntity.getActive() != null && emailMessageLabelsEntity.getActive()) {
					EmailLabelsEntity emailLabel = emailMessageLabelsEntity.getEmailLabelsEntity();
					if (emailLabel.getEmailLabelTypeId() != null) {
						UserLabelSearchResponse userLabelResponse = new UserLabelSearchResponse();
						userLabelResponse.setLabelId(emailMessageLabelsEntity.getEmailLabelId());
						userLabelResponse.setLabelName(emailLabel.getEmailLabelName());
						userLabels.add(userLabelResponse);
					} else {
						EmailLabelsResponse emailLabelsResponse = new EmailLabelsResponse();
						emailLabelsResponse.setLabelName(emailLabel.getEmailLabelName());
						if (emailLabel.getEmailLabelName() != null) {

							if (emailLabel.getEmailLabelName().equalsIgnoreCase("Manually Processed")) {
								String userName = emailMessageLabelsEntity.getCreatedBy();
								if (userName != null) {
									UserInfoDTO userInfo = null;
									try {
										userInfo = externalParsingEngine.getUserInfoDetail(userName, uuid);
									} catch (Exception e) {
										throw new RuntimeException(e);
									}
									if (userInfo != null && userInfo.getDisplayName() != null) {
										emailLabelsResponse.setUserName(userInfo.getDisplayName());
									} else {
										emailLabelsResponse.setUserName(userName);
									}
								}
							} else if (emailLabel.getEmailLabelName().equalsIgnoreCase("In Progress")) {
								emailLabelsResponse.setUserName(emailLabel.getCreatedBy());
							}
							emailLabelsResponse.setDate(Timestamp.valueOf(emailMessageLabelsEntity.getCreatedDate()));
							emailLabelsList.add(emailLabelsResponse);
						}
					}

				}
			}}}
}
