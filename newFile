import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import java.sql.Timestamp;
import java.util.*;

public class EmailMessageSearchServiceTest {

    @Test
    public void testFetchEmailMessageLabels() {
        // Mocking necessary objects and dependencies
        ExternalParsingEngineImpl externalParsingEngine = mock(ExternalParsingEngineImpl.class);
        EmailMessageSearchService emailMessageSearchService = new EmailMessageSearchService(externalParsingEngine);

        EmailMessageLabelsEntity emailMessageLabelsEntity = new EmailMessageLabelsEntity();
        emailMessageLabelsEntity.setActive(true);

        EmailLabelsEntity emailLabelsEntity = new EmailLabelsEntity();
        emailLabelsEntity.setEmailLabelName("Manually Processed");

        emailMessageLabelsEntity.setEmailLabelsEntity(emailLabelsEntity);
        emailMessageLabelsEntity.setEmailLabelId(123L);
        emailMessageLabelsEntity.setCreatedBy("TestUser");
        emailMessageLabelsEntity.setCreatedDate(new Date());

        List<EmailMessageLabelsEntity> emailMessageLabelsEntityList = new ArrayList<>();
        emailMessageLabelsEntityList.add(emailMessageLabelsEntity);

        List<EmailLabelsResponse> emailLabelsList = new ArrayList<>();
        List<UserLabelSearchResponse> userLabels = new ArrayList<>();
        UUID uuid = UUID.randomUUID();

        UserInfoDTO mockUserInfo = new UserInfoDTO();
        mockUserInfo.setDisplayName("MockDisplayName");

        // Mocking the behavior of externalParsingEngine.getUserInfoDetail()
        when(externalParsingEngine.getUserInfoDetail(anyString(), any(UUID.class))).thenReturn(mockUserInfo);

        // Invoking the method
        emailMessageSearchService.fetchEmailMessageLabels(emailMessageLabelsEntityList, emailLabelsList, userLabels, uuid);

        // Verifying behavior: checking if the emailLabelsList is populated
        assertFalse(emailLabelsList.isEmpty());
        assertEquals("MockDisplayName", emailLabelsList.get(0).getUserName());
    }
}
-------------------
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import java.sql.Timestamp;
import java.util.*;

public class EmailMessageSearchServiceTest {

    @Test
    public void testFetchEmailMessageLabels() {
        // Mocking necessary objects and dependencies
        ExternalParsingEngineImpl externalParsingEngine = mock(ExternalParsingEngineImpl.class);
        EmailMessageSearchService emailMessageSearchService = new EmailMessageSearchService();

        EmailMessageLabelsEntity emailMessageLabelsEntity = new EmailMessageLabelsEntity();
        emailMessageLabelsEntity.setEmailLabelsEntity(new EmailLabelsEntity()); // Mocking EmailLabelsEntity without setters

        List<EmailMessageLabelsEntity> emailMessageLabelsEntityList = new ArrayList<>();
        emailMessageLabelsEntityList.add(emailMessageLabelsEntity);

        List<EmailLabelsResponse> emailLabelsList = new ArrayList<>();
        List<UserLabelSearchResponse> userLabels = new ArrayList<>();
        UUID uuid = UUID.randomUUID();

        UserInfoDTO mockUserInfo = new UserInfoDTO();
        mockUserInfo.setDisplayName("MockDisplayName");

        // Mocking the behavior of externalParsingEngine.getUserInfoDetail()
        when(externalParsingEngine.getUserInfoDetail(anyString(), any(UUID.class))).thenReturn(mockUserInfo);

        // Invoking the method
        emailMessageSearchService.fetchEmailMessageLabels(emailMessageLabelsEntityList, emailLabelsList, userLabels, uuid);

        // Verifying behavior: checking if the emailLabelsList is populated
        assertFalse(emailLabelsList.isEmpty());
        assertEquals("MockDisplayName", emailLabelsList.get(0).getUserName());
    }
}

------------------

org.mockito.exceptions.misusing.InvalidUseOfMatchersException: 
Invalid use of argument matchers!
2 matchers expected, 1 recorded:
-> at com.verizon.ucm.interactionmanagement.services.search.emailmessages.EmailMessageSearchServiceTest.testFetchEmailMessageLabels1(EmailMessageSearchServiceTest.java:784)

This exception may occur if matchers are combined with raw values:
    //incorrect:
    someMethod(anyObject(), "raw String");
When using matchers, all arguments have to be provided by matchers.
For example:
    //correct:
    someMethod(anyObject(), eq("String by matcher"));

For more info see javadoc for Matchers class.


	at com.verizon.ucm.interactionmanagement.services.search.emailmessages.EmailMessageSearchServiceTest.testFetchEmailMessageLabels1(EmailMessageSearchServiceTest.java:784)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
------------
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import java.util.*;

public class EmailMessageSearchServiceTest {

    @Test
    public void testFetchEmailMessageLabels() {
        ExternalParsingEngineImpl externalParsingEngine = mock(ExternalParsingEngineImpl.class);
        EmailMessageSearchService emailMessageSearchService = new EmailMessageSearchService();

        // Create necessary mock data and lists
        List<EmailMessageLabelsEntity> emailMessageLabelsEntityList = Arrays.asList(
            new EmailMessageLabelsEntity() // Add your specific entity objects
        );
        List<EmailLabelsResponse> emailLabelsList = new ArrayList<>();
        List<UserLabelSearchResponse> userLabels = new ArrayList<>();
        UUID uuid = UUID.randomUUID();

        // Using Matchers for all arguments
        when(externalParsingEngine.getUserInfoDetail(anyString(), any(UUID.class)))
            .thenReturn(new UserInfoDTO()); // Mock return

        // Invoking the method
        emailMessageSearchService.fetchEmailMessageLabels(
            eq(emailMessageLabelsEntityList), 
            eq(emailLabelsList),
            eq(userLabels), 
            any(UUID.class)
        );

        // Assertions or verification as needed
        // ...
    }
}

