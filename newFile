 public UserInfoDTO getUserInfoDetail(String vzid, UUID uuid) throws Exception {
        Instant start = Instant.now();
        HttpHeaders headers = new HttpHeaders();
        headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
        HttpEntity<UserInfoDTO> entity = new HttpEntity<>(null, headers);
        String uri = appProperties.getUserInforDetail();
        String targetUri = uri.replace("{vzid}", vzid);
        ResponseEntity<UserInfoDTO> response = null;
        try {
            LOGGER.info("getUserInfoDetail:: before calling url={} to fetch user details  getUserInforDetail={}, uuid={}", appProperties.getUserInforDetail(), uuid);
            response = restTemplate.exchange(targetUri, HttpMethod.GET, entity, UserInfoDTO.class);
            Instant end = Instant.now();
            LOGGER.info("getUserInfoDetail: after call occurred to url={}, parsing_response_object={}, response_code={}, time_taken={}, uuid={}", appProperties.getUserInforDetail(), response.getBody(), response.getStatusCode(), Duration.between(start, end).toMillis(), uuid);
            if (response.getStatusCode().value() == 200) {
                return response.getBody();
            }
        } catch (Exception e) {
            LOGGER.error("getUserInfoDetail:: exception occurred while trying to fetch user name. Exception={},{}, uuid={}", e.getStackTrace(), e.getMessage(), uuid);
        }
        return null;
    }
}
https://kirke-dev.ebiz.verizon.com/api/userInfo?username={vzid}
----------------
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.*;
import org.springframework.web.client.RestTemplate;

class UserInfoServiceTest {

    @Mock
    private RestTemplate restTemplate;

    @InjectMocks
    private UserInfoService userInfoService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void testGetUserInfoDetail_Successful() {
        // Given
        String vzid = "testVzid";
        UUID uuid = UUID.randomUUID();
        String uri = "https://kirke-dev.ebiz.verizon.com/api/userInfo?username={vzid}";
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        UserInfoDTO mockUserInfo = new UserInfoDTO(); // create a mock UserInfoDTO

        ResponseEntity<UserInfoDTO> mockResponseEntity = new ResponseEntity<>(mockUserInfo, HttpStatus.OK);

        when(restTemplate.exchange(eq(uri), eq(HttpMethod.GET), any(HttpEntity.class), eq(UserInfoDTO.class)))
            .thenReturn(mockResponseEntity);

        // When
        UserInfoDTO result = userInfoService.getUserInfoDetail(vzid, uuid);

        // Then
        assertNotNull(result);
        assertEquals(mockUserInfo, result);
    }

    @Test
    void testGetUserInfoDetail_Unsuccessful() {
        // Given
        String vzid = "testVzid";
        UUID uuid = UUID.randomUUID();
        String uri = "https://kirke-dev.ebiz.verizon.com/api/userInfo?username={vzid}";
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        ResponseEntity<UserInfoDTO> mockResponseEntity = new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);

        when(restTemplate.exchange(eq(uri), eq(HttpMethod.GET), any(HttpEntity.class), eq(UserInfoDTO.class)))
            .thenReturn(mockResponseEntity);

        // When
        UserInfoDTO result = userInfoService.getUserInfoDetail(vzid, uuid);

        // Then
        assertNull(result);
    }
}
