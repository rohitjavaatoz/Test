import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.time.Duration;
import java.time.Instant;
import java.util.*;
import java.util.concurrent.CompletableFuture;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class DashBoardProgressTrackerSummaryServiceTest {

    @Mock
    private EmailMessageSearchRepository emailMessageSearchRepository;

    @Mock
    private DashBoardSummaryHandler dashBoardSummaryHandler;

    @Mock
    private EmailMessageLabelsRepository emailMessageLabelsRepository;

    @InjectMocks
    private DashBoardProgressTrackerSummaryService service;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetDashBoardProgressTrackerSummary_Success() throws Exception {
        List<Object[]> mockedResponse = Arrays.asList(new Object[]{"2023-12-25", 5L}, new Object[]{"2023-12-26", 8L});
        when(emailMessageSearchRepository.getAutoProcessedEmailsForPastOneWeek()).thenReturn(mockedResponse);
        when(emailMessageSearchRepository.getUnProcessedEmailsForPastOneWeek()).thenReturn(mockedResponse);

        UUID uuid = UUID.randomUUID();
        List<ProgressTrackerSummaryResponse> result = service.getDashBoardProgressTrackerSummary(uuid);

        assertNotNull(result);
        assertEquals(2, result.size());
        verify(emailMessageSearchRepository, times(1)).getAutoProcessedEmailsForPastOneWeek();
        verify(emailMessageSearchRepository, times(1)).getUnProcessedEmailsForPastOneWeek();
    }

    @Test
    public void testGetDashBoardProgressTrackerSummary_EmptyResponse() throws Exception {
        when(emailMessageSearchRepository.getAutoProcessedEmailsForPastOneWeek()).thenReturn(Collections.emptyList());
        when(emailMessageSearchRepository.getUnProcessedEmailsForPastOneWeek()).thenReturn(Collections.emptyList());

        UUID uuid = UUID.randomUUID();
        List<ProgressTrackerSummaryResponse> result = service.getDashBoardProgressTrackerSummary(uuid);

        assertNotNull(result);
        assertEquals(0, result.size());
        verify(emailMessageSearchRepository, times(1)).getAutoProcessedEmailsForPastOneWeek();
        verify(emailMessageSearchRepository, times(1)).getUnProcessedEmailsForPastOneWeek();
    }

    @Test
    public void testGetDashBoardProgressTrackerSummary_InterruptedException() throws Exception {
        when(emailMessageSearchRepository.getAutoProcessedEmailsForPastOneWeek()).thenThrow(new InterruptedException("Interrupted"));
        UUID uuid = UUID.randomUUID();
        List<ProgressTrackerSummaryResponse> result = service.getDashBoardProgressTrackerSummary(uuid);

        assertNull(result);
        verify(emailMessageSearchRepository, times(1)).getAutoProcessedEmailsForPastOneWeek();
        verify(emailMessageSearchRepository, never()).getUnProcessedEmailsForPastOneWeek();
    }

    @Test
    public void testGetDashBoardProgressTrackerSummary_Exception() throws Exception {
        when(emailMessageSearchRepository.getAutoProcessedEmailsForPastOneWeek()).thenThrow(new RuntimeException("Test Exception"));
        UUID uuid = UUID.randomUUID();
        List<ProgressTrackerSummaryResponse> result = service.getDashBoardProgressTrackerSummary(uuid);

        assertNull(result);
        verify(emailMessageSearchRepository, times(1)).getAutoProcessedEmailsForPastOneWeek();
        verify(emailMessageSearchRepository, never()).getUnProcessedEmailsForPastOneWeek();
    }

    // Add more test cases to cover different scenarios and lines in the service method
}
