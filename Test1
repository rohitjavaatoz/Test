    @RequestMapping(value = "/email-messages/global-search/{globalId}", produces = {"application/json"}, method = RequestMethod.GET)
public ResponseEntity<GlobalSearchResponse> globalSearch(String id, UUID uuid) {
        LOGGER.info("globalSearch: Getting the request id or reference id : referenceIdOrrequestId", id, uuid);
        GlobalSearchResponse globalSearchResponse = null;
        try {
            globalSearchResponse = emailMessageExtractionService.getGlobalSearch(id, uuid);
        } catch (Exception exe) {
            LOGGER.error("exception in emailMessageExtraction method where referenceIdOrrequestId =", id, "Exception =", exe, uuid);
            return new ResponseEntity<>(globalSearchResponse, HttpStatus.NO_CONTENT);
        }
        if (Optional.ofNullable(globalSearchResponse).isPresent()) {
            return new ResponseEntity<>(globalSearchResponse, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(globalSearchResponse, HttpStatus.NO_CONTENT);
        }
    }
-----------
public class GlobalSearchResponse {

	private List<GlobalSearchInfoIfc> referenceInfos;
	private List<GlobalSearchInfoIfc> requestInfos;

}
public interface GlobalSearchInfoIfc {

	String getId();

	String getPartyName();

	String getCreatedDate();

	Integer getEmailMessageId();

}
public interface GlobalSearchInfoIfc {

	String getId();

	String getPartyName();

	String getCreatedDate();

	Integer getEmailMessageId();

}
-------------
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

public class MailHandlingServiceTest {

    @Mock
    private EmailMessageExtractionService emailMessageExtractionService;

    @InjectMocks
    private MailMessageApiController mailMessageApiController;

    @Test
    public void testGlobalSearch_WhenResponseExists_ReturnsOK() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        // Mock response
        GlobalSearchResponse mockResponse = new GlobalSearchResponse();
        List<GlobalSearchInfoIfc> referenceInfos = new ArrayList<>();
        // Add some test data to referenceInfos
        // ...
        mockResponse.setReferenceInfos(referenceInfos);

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenReturn(mockResponse);

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertEquals(referenceInfos, responseEntity.getBody().getReferenceInfos());
    }

    @Test
    public void testGlobalSearch_WhenResponseIsNull_ReturnsNoContent() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenReturn(null);

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());
    }

    @Test
    public void testGlobalSearch_WhenExceptionOccurs_ReturnsNoContent() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenThrow(new Exception("Some exception occurred"));

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());
    }
    
    // Other test cases for different scenarios to cover every line
}
-------
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

public class MailHandlingServiceTest {

    @Mock
    private EmailMessageExtractionService emailMessageExtractionService;

    @InjectMocks
    private MailMessageApiController mailMessageApiController;

    @Test
    public void testGlobalSearch_CoversEveryLine() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        // Case 1: When response exists
        GlobalSearchResponse mockResponse = new GlobalSearchResponse();
        List<GlobalSearchInfoIfc> referenceInfos = new ArrayList<>();
        mockResponse.setReferenceInfos(referenceInfos);

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenReturn(mockResponse);

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertEquals(referenceInfos, responseEntity.getBody().getReferenceInfos());

        // Case 2: When response is null
        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenReturn(null);

        responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());

        // Case 3: When an exception occurs
        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenThrow(new Exception("Some exception occurred"));

        responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());
    }
}
------------
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

public class MailHandlingServiceTest {

    @Mock
    private EmailMessageExtractionService emailMessageExtractionService;

    @InjectMocks
    private MailMessageApiController mailMessageApiController;

    @Test
    public void testGlobalSearch_WhenResponseExists_ReturnsOK() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        // Mock response with sample data
        GlobalSearchResponse mockResponse = new GlobalSearchResponse();
        List<GlobalSearchInfoIfc> referenceInfos = new ArrayList<>();
        // Add sample data to referenceInfos
        referenceInfos.add(new GlobalSearchInfoIfc(/* Add sample data */));
        mockResponse.setReferenceInfos(referenceInfos);

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenReturn(mockResponse);

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertEquals(referenceInfos, responseEntity.getBody().getReferenceInfos());
    }

    @Test
    public void testGlobalSearch_WhenResponseIsNull_ReturnsNoContent() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenReturn(null);

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());
    }

    @Test
    public void testGlobalSearch_WhenExceptionOccurs_ReturnsNoContent() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenThrow(new Exception("Some exception occurred"));

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());
    }
}
---------------
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

public class MailHandlingServiceTest {

    @Mock
    private EmailMessageExtractionService emailMessageExtractionService;

    @InjectMocks
    private MailMessageApiController mailMessageApiController;

    @Test
    public void testGlobalSearch_WhenResponseExists_ReturnsOK() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        // Mock response with sample data
        GlobalSearchResponse mockResponse = new GlobalSearchResponse();
        List<GlobalSearchInfoIfc> referenceInfos = new ArrayList<>();
        referenceInfos.add(createMockGlobalSearchInfo());
        mockResponse.setReferenceInfos(referenceInfos);

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenReturn(mockResponse);

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertEquals(referenceInfos, responseEntity.getBody().getReferenceInfos());
    }

    @Test
    public void testGlobalSearch_WhenResponseIsNull_ReturnsNoContent() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenReturn(null);

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());
    }

    @Test
    public void testGlobalSearch_WhenExceptionOccurs_ReturnsNoContent() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenThrow(new Exception("Some exception occurred"));

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());
    }

    @Test
    public void testGlobalSearch_WhenExceptionOccurs_LogsError() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenThrow(new Exception("Some exception occurred"));

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        // Verify that the logger.error method was called
        verify(LoggerFactory.getLogger(MailMessageApiController.class)).error(
                eq("exception in emailMessageExtraction method where referenceIdOrrequestId ="), 
                eq(id), 
                eq("Exception ="), 
                any(Exception.class), 
                eq(uuid)
        );
    }

    private GlobalSearchInfoIfc createMockGlobalSearchInfo() {
        return new GlobalSearchInfoIfc() {
            @Override
            public String getId() {
                return "mockId";
            }

            @Override
            public String getPartyName() {
                return "mockPartyName";
            }

            @Override
            public String getCreatedDate() {
                return "mockCreatedDate";
            }

            @Override
            public Integer getEmailMessageId() {
                return 123;
            }
            // Implement other methods as needed
        };
    }
}
================
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

public class MailHandlingServiceTest {

    @Mock
    private EmailMessageExtractionService emailMessageExtractionService;

    @InjectMocks
    private MailMessageApiController mailMessageApiController;

    @Test
    public void testGlobalSearch_WhenExceptionOccurs_ReturnsNoContent() throws Exception {
        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenThrow(new Exception("Some exception occurred"));

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch("id1", UUID.randomUUID());

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());

        responseEntity = mailMessageApiController.globalSearch("id2", UUID.randomUUID());

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());
    }

    @Test
    public void testGlobalSearch_WhenExceptionOccurs_LogsError() throws Exception {
        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenThrow(new Exception("Some exception occurred"));

        mailMessageApiController.globalSearch("id", UUID.randomUUID());

        verify(LoggerFactory.getLogger(MailMessageApiController.class)).error(
                eq("exception in emailMessageExtraction method where referenceIdOrrequestId ="),
                eq("id"),
                eq("Exception ="),
                any(Exception.class),
                any(UUID.class)
        );
    }
}
