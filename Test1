    @RequestMapping(value = "/email/updateEmailMessageSeenStatus/{emailMessageId}/{status}", produces = {"application/json"}, method = RequestMethod.PUT)
    public ResponseEntity<ModelApiResponse> updateEmailMessageSeenStatus(@ApiParam(value = "Email that needs to be retrieved with given emailMessageId", required = true) @PathVariable("emailMessageId") Integer emailMessageId, @PathVariable("status") Boolean status,@RequestHeader("UUID") UUID uuid){
        ResponseEntity<ModelApiResponse> response;
        LOGGER.info("updateEmailMessageSeenStatus: Updating  email messages status of email message ID {}  with {} : uuid={}",emailMessageId,status,uuid);
        try{
            response=mailHandlingService.updateEmailMessageStatus(emailMessageId,status,uuid);
            LOGGER.info("updateEmailMessageSeenStatus: email messages status of email message ID {} updated with {} : uuid={}",emailMessageId,status,uuid);
        }
        catch (Exception e){
            ModelApiResponse modelApiResponse=new ModelApiResponse();
            modelApiResponse.message("record with id '"+ emailMessageId +"' wasn't found");
            modelApiResponse.code(400);
            LOGGER.error("updateEmailMessageSeenStatus: Error while updating Email Message seen status :{} , uuid={}",e,uuid);
            return new ResponseEntity<>(modelApiResponse, HttpStatus.NOT_FOUND);
        }
        return response;
    }
------------
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

class MailHandlingServiceTest {

    @Mock
    private MailHandlingService mailHandlingService;

    @InjectMocks
    private MailMessageApiController mailMessageApiController;

    @Test
    void testUpdateEmailMessageSeenStatus_Success() throws Exception {
        int emailMessageId = 123;
        boolean status = true;
        UUID uuid = UUID.randomUUID();

        ResponseEntity<ModelApiResponse> mockResponse = new ResponseEntity<>(new ModelApiResponse(), HttpStatus.OK);
        when(mailHandlingService.updateEmailMessageStatus(anyInt(), anyBoolean(), any(UUID.class)))
                .thenReturn(mockResponse);

        ResponseEntity<ModelApiResponse> responseEntity = mailMessageApiController.updateEmailMessageSeenStatus(emailMessageId, status, uuid);

        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        verify(mailHandlingService).updateEmailMessageStatus(emailMessageId, status, uuid);
    }

    @Test
    void testUpdateEmailMessageSeenStatus_Exception() throws Exception {
        int emailMessageId = 123;
        boolean status = true;
        UUID uuid = UUID.randomUUID();

        when(mailHandlingService.updateEmailMessageStatus(anyInt(), anyBoolean(), any(UUID.class)))
                .thenThrow(new Exception("Record not found"));

        ResponseEntity<ModelApiResponse> responseEntity = mailMessageApiController.updateEmailMessageSeenStatus(emailMessageId, status, uuid);

        assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());
        verify(mailHandlingService).updateEmailMessageStatus(emailMessageId, status, uuid);
    }
}
