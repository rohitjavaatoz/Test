    @RequestMapping(value = "/email-messages/global-search/{globalId}", produces = {"application/json"}, method = RequestMethod.GET)
public ResponseEntity<GlobalSearchResponse> globalSearch(String id, UUID uuid) {
        LOGGER.info("globalSearch: Getting the request id or reference id : referenceIdOrrequestId", id, uuid);
        GlobalSearchResponse globalSearchResponse = null;
        try {
            globalSearchResponse = emailMessageExtractionService.getGlobalSearch(id, uuid);
        } catch (Exception exe) {
            LOGGER.error("exception in emailMessageExtraction method where referenceIdOrrequestId =", id, "Exception =", exe, uuid);
            return new ResponseEntity<>(globalSearchResponse, HttpStatus.NO_CONTENT);
        }
        if (Optional.ofNullable(globalSearchResponse).isPresent()) {
            return new ResponseEntity<>(globalSearchResponse, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(globalSearchResponse, HttpStatus.NO_CONTENT);
        }
    }
-----------
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

public class MailHandlingServiceTest {

    @Mock
    private EmailMessageExtractionService emailMessageExtractionService;

    @InjectMocks
    private MailMessageApiController mailMessageApiController;

    @Test
    public void testGlobalSearch_WhenResponseExists_ReturnsOK() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        GlobalSearchResponse mockResponse = new GlobalSearchResponse();
        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenReturn(mockResponse);

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertEquals(mockResponse, responseEntity.getBody());
    }

    @Test
    public void testGlobalSearch_WhenResponseIsNull_ReturnsNoContent() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenReturn(null);

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());
    }

    @Test
    public void testGlobalSearch_WhenExceptionOccurs_ReturnsNoContent() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenThrow(new Exception("Some exception occurred"));

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());
    }
    
    // Other test cases for different scenarios
}
