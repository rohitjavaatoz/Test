    @RequestMapping(value = "/email-messages/{emailMessageId}/reply", produces = {"application/json"}, method = RequestMethod.POST)
    public ResponseEntity<ModelApiResponse> replyEmail(EmailNotificationsDTO emailNotificationsDTO, @RequestHeader("UUID") UUID uuid){
        ModelApiResponse modelApiResponse = new ModelApiResponse();
        String response;
        try{
            if(emailNotificationsDTO.getAction().equalsIgnoreCase("reply")) {
                LOGGER.info("replyEmail:Reply email :{} , uuid={}",emailNotificationsDTO,uuid);
                modelApiResponse = mailHandlingService.sendReplyEmail(emailNotificationsDTO, uuid);
            }
            else if(emailNotificationsDTO.getAction().equalsIgnoreCase("forward")){
                LOGGER.info("replyEmail:Forward email :{} , uuid={}",emailNotificationsDTO,uuid);
                modelApiResponse = mailHandlingService.sendForwardEmail(emailNotificationsDTO,uuid);
            }
            else{
                throw new Exception("Email Action is not Defined");
            }
        }
        catch (Exception e){
            LOGGER.error("getMailMessagesByEmailExtractionId: Error while sending Email: {}, uuid={}",e,uuid);
            modelApiResponse.code(400);
            modelApiResponse.message(e.toString());
            return new ResponseEntity<>(modelApiResponse, HttpStatus.BAD_REQUEST);
        }
        LOGGER.info("getMailMessagesByEmailExtractionId:  {}, uuid={}",modelApiResponse.getMessage(),uuid);
        if(modelApiResponse.getCode() == 200) {
            return new ResponseEntity<>(modelApiResponse, HttpStatus.CREATED);
        }
        else{
            return new ResponseEntity<>(modelApiResponse, HttpStatus.BAD_REQUEST);
        }
    }
==========
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

class MailHandlingServiceTest {

    @Mock
    private MailHandlingService mailHandlingService;

    @InjectMocks
    private MailMessageApiController mailMessageApiController;

    @Test
    void testReplyEmail_WhenActionIsReply_Success() throws Exception {
        EmailNotificationsDTO emailNotificationsDTO = new EmailNotificationsDTO("reply", /* other params */);
        UUID uuid = UUID.randomUUID();

        ModelApiResponse mockResponse = new ModelApiResponse();
        when(mailHandlingService.sendReplyEmail(any(EmailNotificationsDTO.class), any(UUID.class)))
                .thenReturn(mockResponse);

        ResponseEntity<ModelApiResponse> responseEntity = mailMessageApiController.replyEmail(emailNotificationsDTO, uuid);

        assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());
        verify(mailHandlingService).sendReplyEmail(emailNotificationsDTO, uuid);
    }

    @Test
    void testReplyEmail_WhenActionIsForward_Success() throws Exception {
        EmailNotificationsDTO emailNotificationsDTO = new EmailNotificationsDTO("forward", /* other params */);
        UUID uuid = UUID.randomUUID();

        ModelApiResponse mockResponse = new ModelApiResponse();
        when(mailHandlingService.sendForwardEmail(any(EmailNotificationsDTO.class), any(UUID.class)))
                .thenReturn(mockResponse);

        ResponseEntity<ModelApiResponse> responseEntity = mailMessageApiController.replyEmail(emailNotificationsDTO, uuid);

        assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());
        verify(mailHandlingService).sendForwardEmail(emailNotificationsDTO, uuid);
    }

    @Test
    void testReplyEmail_WhenActionIsNotDefined() throws Exception {
        EmailNotificationsDTO emailNotificationsDTO = new EmailNotificationsDTO("unknown", /* other params */);
        UUID uuid = UUID.randomUUID();

        ResponseEntity<ModelApiResponse> responseEntity = mailMessageApiController.replyEmail(emailNotificationsDTO, uuid);

        assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());
        verifyNoInteractions(mailHandlingService);
    }

    @Test
    void testReplyEmail_WhenExceptionOccurs() throws Exception {
        EmailNotificationsDTO emailNotificationsDTO = new EmailNotificationsDTO("reply", /* other params */);
        UUID uuid = UUID.randomUUID();

        when(mailHandlingService.sendReplyEmail(any(EmailNotificationsDTO.class), any(UUID.class)))
                .thenThrow(new Exception("Error sending email"));

        ResponseEntity<ModelApiResponse> responseEntity = mailMessageApiController.replyEmail(emailNotificationsDTO, uuid);

        assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());
        verify(mailHandlingService).sendReplyEmail(emailNotificationsDTO, uuid);
    }
}
------------
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

class MailHandlingServiceTest {

    @Mock
    private MailHandlingService mailHandlingService;

    @InjectMocks
    private MailMessageApiController mailMessageApiController;

    @Test
    void testReplyEmail_WhenActionIsReply_Success() throws Exception {
        EmailNotificationsDTO emailNotificationsDTO = new EmailNotificationsDTO();
        emailNotificationsDTO.setAction("reply");
        // Set other required parameters
        emailNotificationsDTO.setSubject("Subject");
        // ... other parameters

        UUID uuid = UUID.randomUUID();

        ModelApiResponse mockResponse = new ModelApiResponse();
        when(mailHandlingService.sendReplyEmail(any(EmailNotificationsDTO.class), any(UUID.class)))
                .thenReturn(mockResponse);

        ResponseEntity<ModelApiResponse> responseEntity = mailMessageApiController.replyEmail(emailNotificationsDTO, uuid);

        assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());
        verify(mailHandlingService).sendReplyEmail(eq(emailNotificationsDTO), eq(uuid));
    }

    // Similar tests for 'forward', 'unknown action', and exception cases
}

