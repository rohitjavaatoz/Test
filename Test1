    @RequestMapping(value = "/email-labels/{labelId}", produces = { "application/json" }, method = RequestMethod.PATCH)
@Override
    public ResponseEntity<ModelApiResponse> editUserDefinedLabels(UserLabelsRequest editLabelsRequest, UUID uuid) {
        LOGGER.info(
                "EmailLabelsApiRestController# editUserDefinedLabels#: labels={},uuid={}",editLabelsRequest,uuid);
        ResponseEntity<ModelApiResponse> responseEntity = null;
        ModelApiResponse modelApiResponse = new ModelApiResponse();
        EmailLabelsEntity emailLabels=null;
        try{
            if(editLabelsRequest.getEmailLabelId() != null && editLabelsRequest.getEmailLabelName() != null) {
                emailLabels=emailLabelsService.editLabels(editLabelsRequest, uuid);
                if (emailLabels != null) {
                    LOGGER.info(
                            "EmailLabelsApiRestController# editUserDefinedLabels#: Email label was updated successfully {},uuid={}",
                            emailLabels, uuid);
                    modelApiResponse.setCode(201);
                    modelApiResponse.setMessage(editLabelsRequest.getEmailLabelName()+" successfully edited");
                    responseEntity = new ResponseEntity<>(modelApiResponse, HttpStatus.OK);
                }

            }
            else {
                LOGGER.info(
                        "EmailLabelsApiRestController# editUserDefinedLabels#: Email Label Id and name is empty,uuid={}",
                        uuid);
                modelApiResponse.setCode(400);
                modelApiResponse.setMessage("Email Label Id and Name cannot be null");
                responseEntity = new ResponseEntity<>(modelApiResponse, HttpStatus.BAD_REQUEST);
            }
        }
        catch(Exception exe){
            LOGGER.error("EmailLabelsApiRestController# editUserDefinedLabels#:Error while editing Email label ={}:UUID={}", exe, uuid);
        }
        return  responseEntity;
    }
