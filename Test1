https://verizon.webex.com/wbxmjs/joinservice/sites/verizon/meeting/download/131b0d26b3854a0aafdd3f78874d7962
@RequestMapping(value = "/email-messages/global-search/{globalId}", produces = {"application/json"}, method = RequestMethod.GET)
public ResponseEntity<GlobalSearchResponse> globalSearch(String id, UUID uuid) {
        LOGGER.info("globalSearch: Getting the request id or reference id : referenceIdOrrequestId", id, uuid);
        GlobalSearchResponse globalSearchResponse = null;
        try {
            globalSearchResponse = emailMessageExtractionService.getGlobalSearch(id, uuid);
        } catch (Exception exe) {
            LOGGER.error("exception in emailMessageExtraction method where referenceIdOrrequestId =", id, "Exception =", exe, uuid);
            return new ResponseEntity<>(globalSearchResponse, HttpStatus.NO_CONTENT);
        }
        if (Optional.ofNullable(globalSearchResponse).isPresent()) {
            return new ResponseEntity<>(globalSearchResponse, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(globalSearchResponse, HttpStatus.NO_CONTENT);
        }
    }
-------------
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class GlobalSearchControllerTest {

    @Mock
    private EmailMessageExtractionService emailMessageExtractionService;

    @Mock
    private Logger logger;

    @InjectMocks
    private GlobalSearchController globalSearchController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGlobalSearch_ValidResponse_PresentsData_ReturnsOK() {
        String id = "sampleId";
        UUID uuid = UUID.randomUUID();

        GlobalSearchResponse mockedGlobalSearchResponse = new GlobalSearchResponse(); // Create a mocked GlobalSearchResponse object

        when(emailMessageExtractionService.getGlobalSearch(id, uuid)).thenReturn(mockedGlobalSearchResponse);

        ResponseEntity<GlobalSearchResponse> responseEntity = globalSearchController.globalSearch(id, uuid);

        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertNotNull(responseEntity.getBody());
        // Add assertions or handling to match the responseEntity with mockedGlobalSearchResponse
    }

    @Test
    void testGlobalSearch_NoData_ReturnsNoContent() {
        String id = "nonExistingId";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionService.getGlobalSearch(id, uuid)).thenReturn(null); // Simulating no data found

        ResponseEntity<GlobalSearchResponse> responseEntity = globalSearchController.globalSearch(id, uuid);

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertNull(responseEntity.getBody());
        // Add assertions or handling for no content scenario
    }
}
------------
{
  "description": "The description of change request",
  "externalReference": [
        {
            "id": "11"
        }
    ],
    "location": {
        "name": "144 Main Street Tokyo 51663556"
    },
  "plannedEndTime": "2021-09-09T06:23:42.451Z",
  "plannedStartTime": "2021-09-09T08:23:42.451Z",
  "attachment": [
    {
      "href": "URI for this Attachment",
      "name": "The name of the attachment",
      "size": {
      "amount": 128.00
      },
      "attachmentType": "picture"
    }
  ],
  "targetEntity": [
    {
      "name": "This is the network_element_name"
    }
  ],
  "relatedParty": [
    {
      "name": "TMF Telco",
      "role": "Service Provider",
       "@referredType": "Organization"
    },
    {
      "name": "John Doe",
      "role": "requestor",
       "@referredType": "ChangeRequestor"
    }
  ],
  "requestType": "Standard",
  "priority": "Low",
  "specification": {
        "id": "11",
        "href": "https://mycsp.com:8080/tmf-api/entityCatalogManagement/v4/entitySpecification/11",
        "name": "Change",
        "version": "1.0",
        "@referredType": "ChangeManagementSpecification",
        "@type": "EntitySpecification",
        "@schemaLocation": "https://mycsp.com:8080/tmf-api/schema/Common/EntitySpecification.schema.json",
        "@baseType": "EntitySpecification"
    },
  "outage": {
        "outageDuration": 120,
        "outageDurationUom": "minute",
        "outageNumber": 1,
        "outageStart": "2021-09-09T06:23:42.451Z",
        "outageEnd": "2021-09-09T08:23:42.451Z"
    }
}
-----
externalReference,location,plannedEndTime,plannedStartTime,targetEntity,relatedParty,requestType,priority,specification
public class Application {
  private String description;
  ArrayList<Object> externalReference = new ArrayList<Object>();
  Location LocationObject;
  private String plannedEndTime;
  private String plannedStartTime;
  ArrayList<Object> attachment = new ArrayList<Object>();
  ArrayList<Object> targetEntity = new ArrayList<Object>();
  ArrayList<Object> relatedParty = new ArrayList<Object>();
  private String requestType;
  private String priority;
  Specification SpecificationObject;
  Outage OutageObject;


 // Getter Methods 

  public String getDescription() {
    return description;
  }

  public Location getLocation() {
    return LocationObject;
  }

  public String getPlannedEndTime() {
    return plannedEndTime;
  }

  public String getPlannedStartTime() {
    return plannedStartTime;
  }

  public String getRequestType() {
    return requestType;
  }

  public String getPriority() {
    return priority;
  }

  public Specification getSpecification() {
    return SpecificationObject;
  }

  public Outage getOutage() {
    return OutageObject;
  }

 // Setter Methods 

  public void setDescription( String description ) {
    this.description = description;
  }

  public void setLocation( Location locationObject ) {
    this.LocationObject = locationObject;
  }

  public void setPlannedEndTime( String plannedEndTime ) {
    this.plannedEndTime = plannedEndTime;
  }

  public void setPlannedStartTime( String plannedStartTime ) {
    this.plannedStartTime = plannedStartTime;
  }

  public void setRequestType( String requestType ) {
    this.requestType = requestType;
  }

  public void setPriority( String priority ) {
    this.priority = priority;
  }

  public void setSpecification( Specification specificationObject ) {
    this.SpecificationObject = specificationObject;
  }

  public void setOutage( Outage outageObject ) {
    this.OutageObject = outageObject;
  }
}
public class Outage {
  private float outageDuration;
  private String outageDurationUom;
  private float outageNumber;
  private String outageStart;
  private String outageEnd;


 // Getter Methods 

  public float getOutageDuration() {
    return outageDuration;
  }

  public String getOutageDurationUom() {
    return outageDurationUom;
  }

  public float getOutageNumber() {
    return outageNumber;
  }

  public String getOutageStart() {
    return outageStart;
  }

  public String getOutageEnd() {
    return outageEnd;
  }

 // Setter Methods 

  public void setOutageDuration( float outageDuration ) {
    this.outageDuration = outageDuration;
  }

  public void setOutageDurationUom( String outageDurationUom ) {
    this.outageDurationUom = outageDurationUom;
  }

  public void setOutageNumber( float outageNumber ) {
    this.outageNumber = outageNumber;
  }

  public void setOutageStart( String outageStart ) {
    this.outageStart = outageStart;
  }

  public void setOutageEnd( String outageEnd ) {
    this.outageEnd = outageEnd;
  }
}
public class Specification {
  private String id;
  private String href;
  private String name;
  private String version;
  private String @referredType;
  private String @type;
  private String @schemaLocation;
  private String @baseType;


 // Getter Methods 

  public String getId() {
    return id;
  }

  public String getHref() {
    return href;
  }

  public String getName() {
    return name;
  }

  public String getVersion() {
    return version;
  }

  public String get@referredType() {
    return @referredType;
  }

  public String get@type() {
    return @type;
  }

  public String get@schemaLocation() {
    return @schemaLocation;
  }

  public String get@baseType() {
    return @baseType;
  }

 // Setter Methods 

  public void setId( String id ) {
    this.id = id;
  }

  public void setHref( String href ) {
    this.href = href;
  }

  public void setName( String name ) {
    this.name = name;
  }

  public void setVersion( String version ) {
    this.version = version;
  }

  public void set@referredType( String @referredType ) {
    this.@referredType = @referredType;
  }

  public void set@type( String @type ) {
    this.@type = @type;
  }

  public void set@schemaLocation( String @schemaLocation ) {
    this.@schemaLocation = @schemaLocation;
  }

  public void set@baseType( String @baseType ) {
    this.@baseType = @baseType;
  }
}
public class Location {
  private String name;


 // Getter Methods 

  public String getName() {
    return name;
  }

 // Setter Methods 

  public void setName( String name ) {
    this.name = name;
  }
}
