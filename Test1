    @RequestMapping(value = "/email-messages/{emailMessageid}/email-extraction/{id}", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
public ResponseEntity<ModelApiResponse> messageExtractionAudit(EditAttributesDTO editAttributesDTO,@RequestHeader("UUID") UUID uuid){
        ModelApiResponse modelApiResponse = new ModelApiResponse();
        boolean[] response;
        EmailLockResponse emailLockResponse = emailMessageExtractionService.getEmailLockInfo(editAttributesDTO, uuid);
        Integer emailMessageId = editAttributesDTO.getEmailMessageId();
        try {
			if (emailLockResponse != null && ((emailLockResponse.getLockedBy() == null)
					|| (emailLockResponse.isLocked() && emailLockResponse.getLockedBy().equals(editAttributesDTO.getModifiedBy())))) {
				  response = emailMessagesService.editAtrributes(editAttributesDTO, uuid);
                if (response[0]) {
                    modelApiResponse.message("Email Message updated successfully for email message "+emailMessageId);
                    LOGGER.info("messageExtractionAudit: Email message attributes updated successfully for emailMessageId {}: uuid={}", emailMessageId, uuid);
                } else if (response[1]) {
                    modelApiResponse.message("Network Elements deleted successfully");
                    LOGGER.info("messageExtractionAudit: Network Elements deleted successfully for emailMessageId {}: uuid={}", emailMessageId, uuid);
                } else {
                    LOGGER.error("messageExtractionAudit: Error while updating the email message : uuid={}", uuid);
                    throw new Exception("Error while updating the email message");
                }
            }else if(emailLockResponse != null && emailLockResponse.getLockedBy() != null){
                LOGGER.error("messageExtractionAudit: Error while accessing the Locked email {}: uuid={}", emailMessageId, uuid);
                modelApiResponse.code(400);
				modelApiResponse.message("Unable to edit message " + editAttributesDTO.getEmailMessageId()
						+ " as Email is locked by " + emailLockResponse.getLockedBy());
				return new ResponseEntity<>(modelApiResponse, HttpStatus.BAD_REQUEST);
            }
        }
        catch (Exception e){
            modelApiResponse.code(400);
            modelApiResponse.message("Error while updating the email message "+emailMessageId);
            return new ResponseEntity<>(modelApiResponse, HttpStatus.BAD_REQUEST);
        }
        modelApiResponse.code(201);

        return new ResponseEntity<>(modelApiResponse, HttpStatus.CREATED);
    }
