INSERT INTO ucmcmt.api_messages (party_id, created_by, ucmId)
SELECT p.id, p.created_by, 2
FROM ucmcmt.party p
WHERE p.party_name = 'your_received_party_name'
RETURNING *; -- You can specify the columns you want to return or use * to return all columns

-----------------
INSERT INTO ucmcmt.api_messages (
    party_id,
    created_by
    -- other_columns_if_needed
)
SELECT
    p.id AS party_id,
    p.created_by AS created_by
    -- other_values_if_needed
FROM
    ucmcmt.party p
WHERE
    p.party_name = 'your_received_party_name';
------
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.transaction.annotation.Transactional;

public interface ApiMessagesRepository extends JpaRepository<ApiMessages, Long> {

    @Modifying
    @Transactional
    @Query(value = "INSERT INTO ucmcmt.api_messages (party_id, created_by) " +
            "SELECT p.id AS party_id, p.created_by AS created_by " +
            "FROM ucmcmt.party p " +
            "WHERE p.party_name = :partyName", nativeQuery = true)
    void insertIntoApiMessages(@Param("partyName") String partyName);
}


























-- Table: ucmcmt.api_messages

-- DROP TABLE IF EXISTS ucmcmt.api_messages;

CREATE TABLE IF NOT EXISTS ucmcmt.api_messages
(
    api_message_id integer NOT NULL DEFAULT nextval('email_messages_email_message_id_seq'::regclass),
    message_id integer,
    api_payload json,
    party_id integer,
    created_date timestamp without time zone,
    created_by character varying COLLATE pg_catalog."default",
    modified_date timestamp without time zone,
    modified_by character varying COLLATE pg_catalog."default",
    api_message_status_id integer,
    parent_api_message_id integer,
    retry_request_creation_count integer,
    is_fiber boolean,
    CONSTRAINT api_message_id_pkey PRIMARY KEY (api_message_id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS ucmcmt.api_messages
    OWNER to ucmqa;
--------------------
-- Table: ucmcmt.party

-- DROP TABLE IF EXISTS ucmcmt.party;

CREATE TABLE IF NOT EXISTS ucmcmt.party
(
    key integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    id integer NOT NULL,
    party_name character varying(50) COLLATE pg_catalog."default",
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    party_type_id integer,
    created_date timestamp without time zone,
    created_by character varying COLLATE pg_catalog."default",
    modified_date timestamp without time zone,
    modified_by character varying COLLATE pg_catalog."default",
    is_active boolean,
    CONSTRAINT party_pkey PRIMARY KEY (key),
    CONSTRAINT party_type_fkkey FOREIGN KEY (party_type_id)
        REFERENCES ucmcmt.party_type (party_type_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS ucmcmt.party
    OWNER to ucmqa;
-- Index: idx_party_key

-- DROP INDEX IF EXISTS ucmcmt.idx_party_key;

CREATE INDEX IF NOT EXISTS idx_party_key
    ON ucmcmt.party USING btree
    (key ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: idx_party_party_name_gin

-- DROP INDEX IF EXISTS ucmcmt.idx_party_party_name_gin;

CREATE INDEX IF NOT EXISTS idx_party_party_name_gin
    ON ucmcmt.party USING gin
    (lower(party_name::text) COLLATE pg_catalog."default")
    TABLESPACE pg_default;
-- Index: idx_party_party_name_party_type

-- DROP INDEX IF EXISTS ucmcmt.idx_party_party_name_party_type;

CREATE INDEX IF NOT EXISTS idx_party_party_name_party_type
    ON ucmcmt.party USING btree
    (lower(party_name::text) COLLATE pg_catalog."default" ASC NULLS LAST, party_type_id ASC NULLS LAST)
    TABLESPACE pg_default;
-----------------------------------
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.transaction.annotation.Transactional;

public interface SecondTableRepository extends CrudRepository<SecondTableEntity, Long> {

    @Modifying
    @Transactional
    @Query("INSERT INTO SecondTableEntity (firstTableId, otherFields) " +
           "SELECT ft.id, :otherFields " +
           "FROM FirstTableEntity ft " +
           "WHERE ft.name = :firstName")
    void insertIntoSecondTable(@Param("firstName") String firstName, @Param("otherFields") String otherFields);
}
INSERT INTO second_table (first_table_id, other_fields)
SELECT ft.id, 'your_other_fields'
FROM first_table ft
WHERE ft.name = 'your_first_table_name';



ALTER TABLE ucmcmt.api_messages
ALTER COLUMN api_message_id
SET DEFAULT nextval('ucmcmt.api_messages_api_message_id_seq'::regclass);
---------
SELECT *
FROM pg_sequences
WHERE sequencename = 'ucmcmt.api_messages_api_message_id_seq';
----
CREATE SEQUENCE ucmcmt.email_messages_email_message_id_seq
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1
    MAXVALUE 2147483647
    CACHE 1;
-------------------


CREATE SEQUENCE ucmcmt.api_messages_api_message_id_seq
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1
    MAXVALUE 2147483647
    CACHE 1;
----------------------------
-- Table: ucmcmt.api_messages

-- DROP TABLE IF EXISTS ucmcmt.api_messages;

CREATE TABLE IF NOT EXISTS ucmcmt.api_messages
(
    api_message_id integer NOT NULL DEFAULT nextval('email_and_api_messages_id_seq'::regclass),
    message_id integer,
    api_payload json,
    party_id integer,
    created_date timestamp without time zone,
    created_by character varying COLLATE pg_catalog."default",
    modified_date timestamp without time zone,
    modified_by character varying COLLATE pg_catalog."default",
    api_message_status_id integer,
    parent_api_message_id integer,
    retry_request_creation_count integer,
    is_fiber boolean,
    CONSTRAINT api_message_id_pkey PRIMARY KEY (api_message_id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS ucmcmt.api_messages
    OWNER to ucmqa;
------
-- Table: ucmcmt.email_messages

-- DROP TABLE IF EXISTS ucmcmt.email_messages;

CREATE TABLE IF NOT EXISTS ucmcmt.email_messages
(
    email_message_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    message_id integer NOT NULL,
    header_id character varying(200) COLLATE pg_catalog."default",
    subject text COLLATE pg_catalog."default",
    body_html text COLLATE pg_catalog."default",
    body_text text COLLATE pg_catalog."default",
    body_translated text COLLATE pg_catalog."default",
    language character varying(20) COLLATE pg_catalog."default",
    party_id integer,
    created_date timestamp without time zone,
    created_by character varying COLLATE pg_catalog."default",
    modified_date timestamp without time zone,
    modified_by character varying COLLATE pg_catalog."default",
    is_seen boolean,
    email_message_status_id integer,
    is_locked boolean,
    locked_by character varying(225) COLLATE pg_catalog."default",
    locked_at timestamp without time zone,
    parent_email_message_id integer,
    retry_request_creation_count integer,
    is_fiber boolean,
    CONSTRAINT email_messages_pkey PRIMARY KEY (email_message_id),
    CONSTRAINT email_message_status_fkkey FOREIGN KEY (email_message_status_id)
        REFERENCES ucmcmt.email_message_status (email_message_status_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT message_fk FOREIGN KEY (message_id)
        REFERENCES ucmcmt.messages (message_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT party_fk FOREIGN KEY (party_id)
        REFERENCES ucmcmt.party (key) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS ucmcmt.email_messages
    OWNER to ucm_app;

REVOKE ALL ON TABLE ucmcmt.email_messages FROM wuwe4gy;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE ucmcmt.email_messages TO ivchevl;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE ucmcmt.email_messages TO negisu6;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE ucmcmt.email_messages TO nomusa1;

GRANT ALL ON TABLE ucmcmt.email_messages TO ucm_app;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE ucmcmt.email_messages TO wuwe4gy;
-- Index: idx_created_date

-- DROP INDEX IF EXISTS ucmcmt.idx_created_date;

CREATE INDEX IF NOT EXISTS idx_created_date
    ON ucmcmt.email_messages USING btree
    (created_date ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: idx_email_message_status_id

-- DROP INDEX IF EXISTS ucmcmt.idx_email_message_status_id;

CREATE INDEX IF NOT EXISTS idx_email_message_status_id
    ON ucmcmt.email_messages USING btree
    (email_message_status_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: idx_email_messages_email_message_id

-- DROP INDEX IF EXISTS ucmcmt.idx_email_messages_email_message_id;

CREATE INDEX IF NOT EXISTS idx_email_messages_email_message_id
    ON ucmcmt.email_messages USING btree
    (email_message_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: idx_email_messages_email_message_status_id

-- DROP INDEX IF EXISTS ucmcmt.idx_email_messages_email_message_status_id;

CREATE INDEX IF NOT EXISTS idx_email_messages_email_message_status_id
    ON ucmcmt.email_messages USING btree
    (email_message_status_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: idx_email_messages_is_fiber

-- DROP INDEX IF EXISTS ucmcmt.idx_email_messages_is_fiber;

CREATE INDEX IF NOT EXISTS idx_email_messages_is_fiber
    ON ucmcmt.email_messages USING btree
    (is_fiber ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: idx_email_messages_subject_gin_idx

-- DROP INDEX IF EXISTS ucmcmt.idx_email_messages_subject_gin_idx;

CREATE INDEX IF NOT EXISTS idx_email_messages_subject_gin_idx
    ON ucmcmt.email_messages USING gin
    (lower(subject) COLLATE pg_catalog."default")
    TABLESPACE pg_default;
-- Index: idx_locked_by

-- DROP INDEX IF EXISTS ucmcmt.idx_locked_by;

CREATE INDEX IF NOT EXISTS idx_locked_by
    ON ucmcmt.email_messages USING btree
    (locked_by COLLATE pg_catalog."default" ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: idx_message_id

-- DROP INDEX IF EXISTS ucmcmt.idx_message_id;

CREATE INDEX IF NOT EXISTS idx_message_id
    ON ucmcmt.email_messages USING btree
    (message_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: idx_party_id

-- DROP INDEX IF EXISTS ucmcmt.idx_party_id;

CREATE INDEX IF NOT EXISTS idx_party_id
    ON ucmcmt.email_messages USING btree
    (party_id ASC NULLS LAST)
    TABLESPACE pg_default;
