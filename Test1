	private static final List<String> lockActions = Arrays.asList(Constants.LOCKED,Constants.UN_LOCKED);

    @RequestMapping(value = "/email-messages/{emailMessageId}/lock", produces = {"application/json"}, consumes = {"application/json"}, method = RequestMethod.PATCH)
public ResponseEntity<EmailLockResponse> saveAndUpdateLockHistory(EmailLockHistoryRequest body, String action, UUID uuid) throws Exception {
		LOGGER.info("MailMessageApiRestController::saveAndUpdateLockHistory: Getting the action as (true or false) saving the lock history table updating the emailmessages table : action", action, uuid);
		EmailLockResponse emailLockedHistory = new EmailLockResponse();
		try {
			if (action != null && lockActions.contains(action.toLowerCase())) {
				emailLockedHistory = emailMessageExtractionService.saveAndUpdateMailLockHistory(body, action, uuid);
			} else {
				throw new Exception("Invalid action " + action + "supplied");
			}
		} catch (Exception exe) {
			LOGGER.error("MailMessageApiRestController::saveAndUpdateLockHistory: exception in saveAndUpdateLockHistory method where action {} Exception {} uuid {}", action, exe, uuid);
			throw exe;
		}
		return new ResponseEntity<>(emailLockedHistory, HttpStatus.OK);
	}
----------------------
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.util.UUID;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(MailMessageApiRestController.class)
class MailMessageApiRestControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Mock
    private EmailMessageExtractionService emailMessageExtractionService;

    @InjectMocks
    private MailMessageApiRestController mailMessageApiRestController;

    @Test
    void testSaveAndUpdateLockHistory_WhenActionIsLocked() throws Exception {
        UUID uuid = UUID.randomUUID();
        EmailLockHistoryRequest request = new EmailLockHistoryRequest();
        String action = Constants.LOCKED;

        EmailLockResponse mockResponse = new EmailLockResponse();
        when(emailMessageExtractionService.saveAndUpdateMailLockHistory(any(), anyString(), any(UUID.class)))
                .thenReturn(mockResponse);

        mockMvc.perform(patch("/email-messages/{emailMessageId}/lock", uuid)
                .contentType(MediaType.APPLICATION_JSON)
                .content("{}")
                .param("action", action))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").exists())
                .andExpect(jsonPath("$.someField").value("expectedValue"));

        verify(emailMessageExtractionService).saveAndUpdateMailLockHistory(request, action, uuid);
    }

    @Test
    void testSaveAndUpdateLockHistory_WhenInvalidAction() throws Exception {
        UUID uuid = UUID.randomUUID();
        EmailLockHistoryRequest request = new EmailLockHistoryRequest();
        String invalidAction = "invalidAction";

        mockMvc.perform(patch("/email-messages/{emailMessageId}/lock", uuid)
                .contentType(MediaType.APPLICATION_JSON)
                .content("{}")
                .param("action", invalidAction))
                .andExpect(status().isBadRequest())
                .andExpect(content().string(containsString("Invalid action")));

        verifyNoInteractions(emailMessageExtractionService);
    }
}
