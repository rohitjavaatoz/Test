@Override
    public ResponseEntity<ModelApiResponse> replyEmail(EmailNotificationsDTO emailNotificationsDTO, @RequestHeader("UUID") UUID uuid){
        ModelApiResponse modelApiResponse = new ModelApiResponse();
        String response;
        try{
            if(emailNotificationsDTO.getAction().equalsIgnoreCase("reply")) {
                LOGGER.info("replyEmail:Reply email :{} , uuid={}",emailNotificationsDTO,uuid);
                modelApiResponse = mailHandlingService.sendReplyEmail(emailNotificationsDTO, uuid);
            }
            else if(emailNotificationsDTO.getAction().equalsIgnoreCase("forward")){
                LOGGER.info("replyEmail:Forward email :{} , uuid={}",emailNotificationsDTO,uuid);
                modelApiResponse = mailHandlingService.sendForwardEmail(emailNotificationsDTO,uuid);
            }
            else{
                throw new Exception("Email Action is not Defined");
            }
        }
        catch (Exception e){
            LOGGER.error("getMailMessagesByEmailExtractionId: Error while sending Email: {}, uuid={}",e,uuid);
            modelApiResponse.code(400);
            modelApiResponse.message(e.toString());
            return new ResponseEntity<>(modelApiResponse, HttpStatus.BAD_REQUEST);
        }
        LOGGER.info("getMailMessagesByEmailExtractionId:  {}, uuid={}",modelApiResponse.getMessage(),uuid);
        if(modelApiResponse.getCode() == 200) {
            return new ResponseEntity<>(modelApiResponse, HttpStatus.CREATED);
        }
        else{
            return new ResponseEntity<>(modelApiResponse, HttpStatus.BAD_REQUEST);
        }
    }
