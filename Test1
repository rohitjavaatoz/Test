@Override
    public ResponseEntity<ModelApiResponse> replyEmail(EmailNotificationsDTO emailNotificationsDTO, @RequestHeader("UUID") UUID uuid){
        ModelApiResponse modelApiResponse = new ModelApiResponse();
        String response;
        try{
            if(emailNotificationsDTO.getAction().equalsIgnoreCase("reply")) {
                LOGGER.info("replyEmail:Reply email :{} , uuid={}",emailNotificationsDTO,uuid);
                modelApiResponse = mailHandlingService.sendReplyEmail(emailNotificationsDTO, uuid);
            }
            else if(emailNotificationsDTO.getAction().equalsIgnoreCase("forward")){
                LOGGER.info("replyEmail:Forward email :{} , uuid={}",emailNotificationsDTO,uuid);
                modelApiResponse = mailHandlingService.sendForwardEmail(emailNotificationsDTO,uuid);
            }
            else{
                throw new Exception("Email Action is not Defined");
            }
        }
        catch (Exception e){
            LOGGER.error("getMailMessagesByEmailExtractionId: Error while sending Email: {}, uuid={}",e,uuid);
            modelApiResponse.code(400);
            modelApiResponse.message(e.toString());
            return new ResponseEntity<>(modelApiResponse, HttpStatus.BAD_REQUEST);
        }
        LOGGER.info("getMailMessagesByEmailExtractionId:  {}, uuid={}",modelApiResponse.getMessage(),uuid);
        if(modelApiResponse.getCode() == 200) {
            return new ResponseEntity<>(modelApiResponse, HttpStatus.CREATED);
        }
        else{
            return new ResponseEntity<>(modelApiResponse, HttpStatus.BAD_REQUEST);
        }
    }
-----------
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class MailHandlingServiceTest {

    @Mock
    private MailHandlingService mailHandlingService;

    @InjectMocks
    private MailMessageApiController mailMessageApiController;

    @Test
    public void testReplyEmail_WhenEmailActionIsNotDefined_ReturnsBadRequest() throws Exception {
        // Mocking the input with an undefined email action
        EmailNotificationsDTO emailNotificationsDTO = new EmailNotificationsDTO();
        // Set an undefined action
        emailNotificationsDTO.setAction("undefined");

        // Mock the UUID
        UUID uuid = UUID.randomUUID();

        // Perform the method invocation
        ResponseEntity<ModelApiResponse> responseEntity = mailMessageApiController.replyEmail(emailNotificationsDTO, uuid);

        // Assert that the method returns a ResponseEntity with HttpStatus.BAD_REQUEST
        assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());
    }
}
