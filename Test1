    @RequestMapping(value = "/email-messages/global-search/{globalId}", produces = {"application/json"}, method = RequestMethod.GET)
public ResponseEntity<GlobalSearchResponse> globalSearch(String id, UUID uuid) {
        LOGGER.info("globalSearch: Getting the request id or reference id : referenceIdOrrequestId", id, uuid);
        GlobalSearchResponse globalSearchResponse = null;
        try {
            globalSearchResponse = emailMessageExtractionService.getGlobalSearch(id, uuid);
        } catch (Exception exe) {
            LOGGER.error("exception in emailMessageExtraction method where referenceIdOrrequestId =", id, "Exception =", exe, uuid);
            return new ResponseEntity<>(globalSearchResponse, HttpStatus.NO_CONTENT);
        }
        if (Optional.ofNullable(globalSearchResponse).isPresent()) {
            return new ResponseEntity<>(globalSearchResponse, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(globalSearchResponse, HttpStatus.NO_CONTENT);
        }
    }
-----------
public class GlobalSearchResponse {

	private List<GlobalSearchInfoIfc> referenceInfos;
	private List<GlobalSearchInfoIfc> requestInfos;

}
public interface GlobalSearchInfoIfc {

	String getId();

	String getPartyName();

	String getCreatedDate();

	Integer getEmailMessageId();

}
public interface GlobalSearchInfoIfc {

	String getId();

	String getPartyName();

	String getCreatedDate();

	Integer getEmailMessageId();

}
-------------
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

public class MailHandlingServiceTest {

    @Mock
    private EmailMessageExtractionService emailMessageExtractionService;

    @InjectMocks
    private MailMessageApiController mailMessageApiController;

    @Test
    public void testGlobalSearch_WhenResponseExists_ReturnsOK() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        // Mock response
        GlobalSearchResponse mockResponse = new GlobalSearchResponse();
        List<GlobalSearchInfoIfc> referenceInfos = new ArrayList<>();
        // Add some test data to referenceInfos
        // ...
        mockResponse.setReferenceInfos(referenceInfos);

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenReturn(mockResponse);

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertEquals(referenceInfos, responseEntity.getBody().getReferenceInfos());
    }

    @Test
    public void testGlobalSearch_WhenResponseIsNull_ReturnsNoContent() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenReturn(null);

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());
    }

    @Test
    public void testGlobalSearch_WhenExceptionOccurs_ReturnsNoContent() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenThrow(new Exception("Some exception occurred"));

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());
    }
    
    // Other test cases for different scenarios to cover every line
}
-------
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

public class MailHandlingServiceTest {

    @Mock
    private EmailMessageExtractionService emailMessageExtractionService;

    @InjectMocks
    private MailMessageApiController mailMessageApiController;

    @Test
    public void testGlobalSearch_CoversEveryLine() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        // Case 1: When response exists
        GlobalSearchResponse mockResponse = new GlobalSearchResponse();
        List<GlobalSearchInfoIfc> referenceInfos = new ArrayList<>();
        mockResponse.setReferenceInfos(referenceInfos);

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenReturn(mockResponse);

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertEquals(referenceInfos, responseEntity.getBody().getReferenceInfos());

        // Case 2: When response is null
        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenReturn(null);

        responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());

        // Case 3: When an exception occurs
        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenThrow(new Exception("Some exception occurred"));

        responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());
    }
}
------------
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

public class MailHandlingServiceTest {

    @Mock
    private EmailMessageExtractionService emailMessageExtractionService;

    @InjectMocks
    private MailMessageApiController mailMessageApiController;

    @Test
    public void testGlobalSearch_WhenResponseExists_ReturnsOK() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        // Mock response with sample data
        GlobalSearchResponse mockResponse = new GlobalSearchResponse();
        List<GlobalSearchInfoIfc> referenceInfos = new ArrayList<>();
        // Add sample data to referenceInfos
        referenceInfos.add(new GlobalSearchInfoIfc(/* Add sample data */));
        mockResponse.setReferenceInfos(referenceInfos);

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenReturn(mockResponse);

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertEquals(referenceInfos, responseEntity.getBody().getReferenceInfos());
    }

    @Test
    public void testGlobalSearch_WhenResponseIsNull_ReturnsNoContent() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenReturn(null);

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());
    }

    @Test
    public void testGlobalSearch_WhenExceptionOccurs_ReturnsNoContent() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenThrow(new Exception("Some exception occurred"));

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());
    }
}
---------------
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

public class MailHandlingServiceTest {

    @Mock
    private EmailMessageExtractionService emailMessageExtractionService;

    @InjectMocks
    private MailMessageApiController mailMessageApiController;

    @Test
    public void testGlobalSearch_WhenResponseExists_ReturnsOK() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        // Mock response with sample data
        GlobalSearchResponse mockResponse = new GlobalSearchResponse();
        List<GlobalSearchInfoIfc> referenceInfos = new ArrayList<>();
        referenceInfos.add(createMockGlobalSearchInfo());
        mockResponse.setReferenceInfos(referenceInfos);

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenReturn(mockResponse);

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertEquals(referenceInfos, responseEntity.getBody().getReferenceInfos());
    }

    @Test
    public void testGlobalSearch_WhenResponseIsNull_ReturnsNoContent() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenReturn(null);

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());
    }

    @Test
    public void testGlobalSearch_WhenExceptionOccurs_ReturnsNoContent() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenThrow(new Exception("Some exception occurred"));

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());
    }

    @Test
    public void testGlobalSearch_WhenExceptionOccurs_LogsError() throws Exception {
        String id = "exampleId";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenThrow(new Exception("Some exception occurred"));

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch(id, uuid);

        // Verify that the logger.error method was called
        verify(LoggerFactory.getLogger(MailMessageApiController.class)).error(
                eq("exception in emailMessageExtraction method where referenceIdOrrequestId ="), 
                eq(id), 
                eq("Exception ="), 
                any(Exception.class), 
                eq(uuid)
        );
    }

    private GlobalSearchInfoIfc createMockGlobalSearchInfo() {
        return new GlobalSearchInfoIfc() {
            @Override
            public String getId() {
                return "mockId";
            }

            @Override
            public String getPartyName() {
                return "mockPartyName";
            }

            @Override
            public String getCreatedDate() {
                return "mockCreatedDate";
            }

            @Override
            public Integer getEmailMessageId() {
                return 123;
            }
            // Implement other methods as needed
        };
    }
}
================
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

public class MailHandlingServiceTest {

    @Mock
    private EmailMessageExtractionService emailMessageExtractionService;

    @InjectMocks
    private MailMessageApiController mailMessageApiController;

    @Test
    public void testGlobalSearch_WhenExceptionOccurs_ReturnsNoContent() throws Exception {
        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenThrow(new Exception("Some exception occurred"));

        ResponseEntity<GlobalSearchResponse> responseEntity = mailMessageApiController.globalSearch("id1", UUID.randomUUID());

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());

        responseEntity = mailMessageApiController.globalSearch("id2", UUID.randomUUID());

        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
        assertEquals(null, responseEntity.getBody());
    }

    @Test
    public void testGlobalSearch_WhenExceptionOccurs_LogsError() throws Exception {
        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenThrow(new Exception("Some exception occurred"));

        mailMessageApiController.globalSearch("id", UUID.randomUUID());

        verify(LoggerFactory.getLogger(MailMessageApiController.class)).error(
                eq("exception in emailMessageExtraction method where referenceIdOrrequestId ="),
                eq("id"),
                eq("Exception ="),
                any(Exception.class),
                any(UUID.class)
        );
    }
}
------------
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.mockito.Mockito.*;

public class MailHandlingServiceTest {

    @Mock
    private EmailMessageExtractionService emailMessageExtractionService;

    @InjectMocks
    private MailMessageApiController mailMessageApiController;

    @Test
    public void testGlobalSearch_WhenExceptionOccurs() throws Exception {
        // Mocking the behavior to throw an exception when called
        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenThrow(new Exception("Some exception occurred"));

        // Use assertDoesNotThrow to ensure no exception is thrown from the test method
        assertDoesNotThrow(() -> mailMessageApiController.globalSearch("id", UUID.randomUUID()));
    }
}
---------------------
ERROR com.verizon.ucm.interactionmanagement.controller.MailMessageApiRestController - EmailMessageExtractionService# getGlobalSearch#: Exception occured while fetching the search results java.lang.NullPointerException: Cannot invoke "com.verizon.ucm.interactionmanagement.repository.EmailMessageExtractionRepository.findByReferenceId(String)" because "this.emailMessageExtractionRepository" is null for searchId  requestId null uuid {}
--------------
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.mockito.Mockito.*;

public class MailHandlingServiceTest {

    @Mock
    private EmailMessageExtractionService emailMessageExtractionService;

    @InjectMocks
    private MailMessageApiController mailMessageApiController;

    @Test
    public void testGlobalSearch_WhenNullPointerExceptionOccurs() throws Exception {
        // Mocking the behavior to throw a NullPointerException when called
        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenThrow(NullPointerException.class);

        // Use assertDoesNotThrow to ensure no exception is thrown from the test method
        assertDoesNotThrow(() -> mailMessageApiController.globalSearch("id", UUID.randomUUID()));
    }
}
-----------------
ERROR com.verizon.ucm.interactionmanagement.controller.MailMessageApiRestController - EmailMessageExtractionService# getGlobalSearch#: Exception occured while fetching the search results java.lang.NullPointerException: Cannot invoke "com.verizon.ucm.interactionmanagement.repository.EmailMessageExtractionRepository.findByReferenceId(String)" because "this.emailMessageExtractionRepository" is null for searchId  requestId null uuid {}

org.mockito.exceptions.misusing.InvalidUseOfMatchersException: 
Misplaced or misused argument matcher detected here:

-> at com.verizon.ucm.interactionmanagement.controller.MailMessageApiRestControllerTest.testGlobalSearch_WhenNullPointerExceptionOccurs(MailMessageApiRestControllerTest.java:680)
-> at com.verizon.ucm.interactionmanagement.controller.MailMessageApiRestControllerTest.testGlobalSearch_WhenNullPointerExceptionOccurs(MailMessageApiRestControllerTest.java:680)

You cannot use argument matchers outside of verification or stubbing.
Examples of correct usage of argument matchers:
    when(mock.get(anyInt())).thenReturn(null);
    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());
    verify(mock).someMethod(contains("foo"))

This message may appear after an NullPointerException if the last matcher is returning an object 
like any() but the stubbed method signature expect a primitive argument, in this case,
use primitive alternatives.
    when(mock.get(any())); // bad use, will raise NPE
    when(mock.get(anyInt())); // correct usage use

Also, this error might show up because you use argument matchers with methods that cannot be mocked.
Following methods *cannot* be stubbed/verified: final/private/equals()/hashCode().
Mocking methods declared on non-public parent classes is not supported.


	at com.verizon.ucm.interactionmanagement.controller.MailMessageApiRestControllerTest.testGlobalSearch_WhenNullPointerExceptionOccurs(MailMessageApiRestControllerTest.java:680)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
===========
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;

import java.util.UUID;

import static org.mockito.Mockito.*;

public class MailHandlingServiceTest {

    @Mock
    private EmailMessageExtractionService emailMessageExtractionService;

    @InjectMocks
    private MailMessageApiController mailMessageApiController;

    @Test
    public void testGlobalSearch_WhenNullPointerExceptionOccurs() throws Exception {
        // Mocking the behavior to throw a NullPointerException when called
        when(emailMessageExtractionService.getGlobalSearch(anyString(), any(UUID.class)))
                .thenThrow(NullPointerException.class);

        // Perform the method invocation and no assertion as we are testing the catch block behavior
        mailMessageApiController.globalSearch("id", UUID.randomUUID());
    }
}

